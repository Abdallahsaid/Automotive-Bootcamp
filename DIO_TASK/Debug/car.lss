
car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b0a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001188  00000000  00000000  00000b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000928  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 76 05 	call	0xaec	; 0xaec <main>
  64:	0c 94 83 05 	jmp	0xb06	; 0xb06 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <APP_vidInit>:
#include "../01-LIB/02-BIT_MATH/BIT_MATH.h"
#include "../03-HAL/01-LED/Led.h"
#include "../03-HAL/02-BUTTON/Button.h"
#include "APP.h"

void APP_vidInit(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
    LED_vidInit(LED_0);
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LED_vidInit>
    BTN_vidInit(BTN_1);
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	0e 94 50 00 	call	0xa0	; 0xa0 <BTN_vidInit>

    
    
}
  80:	cf 91       	pop	r28
  82:	df 91       	pop	r29
  84:	08 95       	ret

00000086 <APP_vidStart>:

void APP_vidStart(void){
  86:	df 93       	push	r29
  88:	cf 93       	push	r28
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62

	while(1){

if (BTN_u8IsPressed(BTN_1) == TRUE)
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	0e 94 77 00 	call	0xee	; 0xee <BTN_u8IsPressed>
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	d9 f7       	brne	.-10     	; 0x8e <APP_vidStart+0x8>
    {
        LED_vidToggle(LED_0);
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 9a 01 	call	0x334	; 0x334 <LED_vidToggle>
  9e:	f7 cf       	rjmp	.-18     	; 0x8e <APP_vidStart+0x8>

000000a0 <BTN_vidInit>:
#include "../../02-MCAL/DIO/Dio.h"
#include "Button.h"
#include "ButtonConfig.h"

void BTN_vidInit(BTN_Num_t btn)
{
  a0:	df 93       	push	r29
  a2:	cf 93       	push	r28
  a4:	00 d0       	rcall	.+0      	; 0xa6 <BTN_vidInit+0x6>
  a6:	0f 92       	push	r0
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	89 83       	std	Y+1, r24	; 0x01
    switch (btn)
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	28 2f       	mov	r18, r24
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	3b 83       	std	Y+3, r19	; 0x03
  b6:	2a 83       	std	Y+2, r18	; 0x02
  b8:	8a 81       	ldd	r24, Y+2	; 0x02
  ba:	9b 81       	ldd	r25, Y+3	; 0x03
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	31 f0       	breq	.+12     	; 0xcc <BTN_vidInit+0x2c>
  c0:	2a 81       	ldd	r18, Y+2	; 0x02
  c2:	3b 81       	ldd	r19, Y+3	; 0x03
  c4:	21 30       	cpi	r18, 0x01	; 1
  c6:	31 05       	cpc	r19, r1
  c8:	39 f0       	breq	.+14     	; 0xd8 <BTN_vidInit+0x38>
  ca:	0b c0       	rjmp	.+22     	; 0xe2 <BTN_vidInit+0x42>
    {
    case BTN_0:
        DIO_vidSetPinDirection(BTN_0_PORT, BTN_0_PIN, INPUT);
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_vidSetPinDirection>
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <BTN_vidInit+0x42>
        {
            // do nothing
        }
        break;
    case BTN_1:
        DIO_vidSetPinDirection(BTN_1_PORT, BTN_1_PIN, INPUT);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	62 e0       	ldi	r22, 0x02	; 2
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_vidSetPinDirection>
        }
        break;
    default:
        break;
    }
}
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	cf 91       	pop	r28
  ea:	df 91       	pop	r29
  ec:	08 95       	ret

000000ee <BTN_u8IsPressed>:

u8_t BTN_u8IsPressed(BTN_Num_t btn)
{   u8_t counter= 0;
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	27 97       	sbiw	r28, 0x07	; 7
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
 102:	8c 83       	std	Y+4, r24	; 0x04
 104:	1b 82       	std	Y+3, r1	; 0x03
    u8_t prev_status = 0;
 106:	1a 82       	std	Y+2, r1	; 0x02
    u8_t status = 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	89 83       	std	Y+1, r24	; 0x01

    switch (btn)
 10c:	8c 81       	ldd	r24, Y+4	; 0x04
 10e:	28 2f       	mov	r18, r24
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	3f 83       	std	Y+7, r19	; 0x07
 114:	2e 83       	std	Y+6, r18	; 0x06
 116:	8e 81       	ldd	r24, Y+6	; 0x06
 118:	9f 81       	ldd	r25, Y+7	; 0x07
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	31 f0       	breq	.+12     	; 0x12a <BTN_u8IsPressed+0x3c>
 11e:	2e 81       	ldd	r18, Y+6	; 0x06
 120:	3f 81       	ldd	r19, Y+7	; 0x07
 122:	21 30       	cpi	r18, 0x01	; 1
 124:	31 05       	cpc	r19, r1
 126:	c9 f0       	breq	.+50     	; 0x15a <BTN_u8IsPressed+0x6c>
 128:	30 c0       	rjmp	.+96     	; 0x18a <BTN_u8IsPressed+0x9c>
    {
    case BTN_0:
        while (1)
        {
            prev_status = DIO_u8ReadPinValue(BTN_0_PORT, BTN_0_PIN);
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	64 e0       	ldi	r22, 0x04	; 4
 12e:	0e 94 80 04 	call	0x900	; 0x900 <DIO_u8ReadPinValue>
 132:	8a 83       	std	Y+2, r24	; 0x02
 134:	03 c0       	rjmp	.+6      	; 0x13c <BTN_u8IsPressed+0x4e>
            while (counter < 150)  //loop to perform a delay
            {
                counter++;    
 136:	8b 81       	ldd	r24, Y+3	; 0x03
 138:	8f 5f       	subi	r24, 0xFF	; 255
 13a:	8b 83       	std	Y+3, r24	; 0x03
    {
    case BTN_0:
        while (1)
        {
            prev_status = DIO_u8ReadPinValue(BTN_0_PORT, BTN_0_PIN);
            while (counter < 150)  //loop to perform a delay
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	86 39       	cpi	r24, 0x96	; 150
 140:	d0 f3       	brcs	.-12     	; 0x136 <BTN_u8IsPressed+0x48>
            {
                counter++;    
            }
            status = DIO_u8ReadPinValue(BTN_0_PORT, BTN_0_PIN);
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	64 e0       	ldi	r22, 0x04	; 4
 146:	0e 94 80 04 	call	0x900	; 0x900 <DIO_u8ReadPinValue>
 14a:	89 83       	std	Y+1, r24	; 0x01
            
            if (status == prev_status)
 14c:	99 81       	ldd	r25, Y+1	; 0x01
 14e:	8a 81       	ldd	r24, Y+2	; 0x02
 150:	98 17       	cp	r25, r24
 152:	59 f7       	brne	.-42     	; 0x12a <BTN_u8IsPressed+0x3c>
            }
        }
        
        if (BTN_0_RESISTOR == BTN_PULL_DOWN_EXT)
        {
            return status;
 154:	39 81       	ldd	r19, Y+1	; 0x01
 156:	3d 83       	std	Y+5, r19	; 0x05
 158:	1a c0       	rjmp	.+52     	; 0x18e <BTN_u8IsPressed+0xa0>
        }
        break;
    case BTN_1:
        while (1)
        {
            prev_status = DIO_u8ReadPinValue(BTN_1_PORT, BTN_1_PIN);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	0e 94 80 04 	call	0x900	; 0x900 <DIO_u8ReadPinValue>
 162:	8a 83       	std	Y+2, r24	; 0x02
 164:	03 c0       	rjmp	.+6      	; 0x16c <BTN_u8IsPressed+0x7e>
            while (counter < 150)  //loop to perform a delay
            {
                counter++;    
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	8b 83       	std	Y+3, r24	; 0x03
        break;
    case BTN_1:
        while (1)
        {
            prev_status = DIO_u8ReadPinValue(BTN_1_PORT, BTN_1_PIN);
            while (counter < 150)  //loop to perform a delay
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	86 39       	cpi	r24, 0x96	; 150
 170:	d0 f3       	brcs	.-12     	; 0x166 <BTN_u8IsPressed+0x78>
            {
                counter++;    
            }
            status = DIO_u8ReadPinValue(BTN_1_PORT, BTN_1_PIN);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	62 e0       	ldi	r22, 0x02	; 2
 176:	0e 94 80 04 	call	0x900	; 0x900 <DIO_u8ReadPinValue>
 17a:	89 83       	std	Y+1, r24	; 0x01
            
            if (status == prev_status)
 17c:	99 81       	ldd	r25, Y+1	; 0x01
 17e:	8a 81       	ldd	r24, Y+2	; 0x02
 180:	98 17       	cp	r25, r24
 182:	59 f7       	brne	.-42     	; 0x15a <BTN_u8IsPressed+0x6c>
                break;
            }
        }
        if (BTN_1_RESISTOR == BTN_PULL_DOWN_EXT)
        {
            return status;
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	8d 83       	std	Y+5, r24	; 0x05
 188:	02 c0       	rjmp	.+4      	; 0x18e <BTN_u8IsPressed+0xa0>
        }
        break;
    default:
        break;
    }
    return status;
 18a:	99 81       	ldd	r25, Y+1	; 0x01
 18c:	9d 83       	std	Y+5, r25	; 0x05
 18e:	8d 81       	ldd	r24, Y+5	; 0x05
}
 190:	27 96       	adiw	r28, 0x07	; 7
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
 19c:	cf 91       	pop	r28
 19e:	df 91       	pop	r29
 1a0:	08 95       	ret

000001a2 <LED_vidInit>:
#include "../../02-MCAL/DIO/Dio.h"
#include "Led.h"
#include "LedConfig.h"

void LED_vidInit(LED_Num_t led)
{
 1a2:	df 93       	push	r29
 1a4:	cf 93       	push	r28
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <LED_vidInit+0x6>
 1a8:	0f 92       	push	r0
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	89 83       	std	Y+1, r24	; 0x01
    switch (led)
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	3b 83       	std	Y+3, r19	; 0x03
 1b8:	2a 83       	std	Y+2, r18	; 0x02
 1ba:	8a 81       	ldd	r24, Y+2	; 0x02
 1bc:	9b 81       	ldd	r25, Y+3	; 0x03
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	91 05       	cpc	r25, r1
 1c2:	d9 f0       	breq	.+54     	; 0x1fa <LED_vidInit+0x58>
 1c4:	2a 81       	ldd	r18, Y+2	; 0x02
 1c6:	3b 81       	ldd	r19, Y+3	; 0x03
 1c8:	22 30       	cpi	r18, 0x02	; 2
 1ca:	31 05       	cpc	r19, r1
 1cc:	2c f4       	brge	.+10     	; 0x1d8 <LED_vidInit+0x36>
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	9b 81       	ldd	r25, Y+3	; 0x03
 1d2:	00 97       	sbiw	r24, 0x00	; 0
 1d4:	61 f0       	breq	.+24     	; 0x1ee <LED_vidInit+0x4c>
 1d6:	22 c0       	rjmp	.+68     	; 0x21c <LED_vidInit+0x7a>
 1d8:	2a 81       	ldd	r18, Y+2	; 0x02
 1da:	3b 81       	ldd	r19, Y+3	; 0x03
 1dc:	22 30       	cpi	r18, 0x02	; 2
 1de:	31 05       	cpc	r19, r1
 1e0:	91 f0       	breq	.+36     	; 0x206 <LED_vidInit+0x64>
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
 1e4:	9b 81       	ldd	r25, Y+3	; 0x03
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	91 05       	cpc	r25, r1
 1ea:	99 f0       	breq	.+38     	; 0x212 <LED_vidInit+0x70>
 1ec:	17 c0       	rjmp	.+46     	; 0x21c <LED_vidInit+0x7a>
    {
    case LED_0:
        DIO_vidSetPinDirection(LED_0_PORT, LED_0_PIN, OUTPUT);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	64 e0       	ldi	r22, 0x04	; 4
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_vidSetPinDirection>
 1f8:	11 c0       	rjmp	.+34     	; 0x21c <LED_vidInit+0x7a>
        break;
    case LED_1:
        DIO_vidSetPinDirection(LED_1_PORT, LED_1_PIN, OUTPUT);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	65 e0       	ldi	r22, 0x05	; 5
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_vidSetPinDirection>
 204:	0b c0       	rjmp	.+22     	; 0x21c <LED_vidInit+0x7a>
        break;
    case LED_2:
        DIO_vidSetPinDirection(LED_2_PORT, LED_2_PIN, OUTPUT);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	66 e0       	ldi	r22, 0x06	; 6
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_vidSetPinDirection>
 210:	05 c0       	rjmp	.+10     	; 0x21c <LED_vidInit+0x7a>
        break;
    case LED_3:
        DIO_vidSetPinDirection(LED_3_PORT, LED_3_PIN, OUTPUT);
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	67 e0       	ldi	r22, 0x07	; 7
 216:	41 e0       	ldi	r20, 0x01	; 1
 218:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_vidSetPinDirection>
        break;

    default:
        break;
    }
}
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	cf 91       	pop	r28
 224:	df 91       	pop	r29
 226:	08 95       	ret

00000228 <LED_vidOn>:
void LED_vidOn(LED_Num_t led)
{
 228:	df 93       	push	r29
 22a:	cf 93       	push	r28
 22c:	00 d0       	rcall	.+0      	; 0x22e <LED_vidOn+0x6>
 22e:	0f 92       	push	r0
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	89 83       	std	Y+1, r24	; 0x01
    switch (led)
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	28 2f       	mov	r18, r24
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	3b 83       	std	Y+3, r19	; 0x03
 23e:	2a 83       	std	Y+2, r18	; 0x02
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	9b 81       	ldd	r25, Y+3	; 0x03
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	91 05       	cpc	r25, r1
 248:	d9 f0       	breq	.+54     	; 0x280 <LED_vidOn+0x58>
 24a:	2a 81       	ldd	r18, Y+2	; 0x02
 24c:	3b 81       	ldd	r19, Y+3	; 0x03
 24e:	22 30       	cpi	r18, 0x02	; 2
 250:	31 05       	cpc	r19, r1
 252:	2c f4       	brge	.+10     	; 0x25e <LED_vidOn+0x36>
 254:	8a 81       	ldd	r24, Y+2	; 0x02
 256:	9b 81       	ldd	r25, Y+3	; 0x03
 258:	00 97       	sbiw	r24, 0x00	; 0
 25a:	61 f0       	breq	.+24     	; 0x274 <LED_vidOn+0x4c>
 25c:	22 c0       	rjmp	.+68     	; 0x2a2 <LED_vidOn+0x7a>
 25e:	2a 81       	ldd	r18, Y+2	; 0x02
 260:	3b 81       	ldd	r19, Y+3	; 0x03
 262:	22 30       	cpi	r18, 0x02	; 2
 264:	31 05       	cpc	r19, r1
 266:	91 f0       	breq	.+36     	; 0x28c <LED_vidOn+0x64>
 268:	8a 81       	ldd	r24, Y+2	; 0x02
 26a:	9b 81       	ldd	r25, Y+3	; 0x03
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	91 05       	cpc	r25, r1
 270:	99 f0       	breq	.+38     	; 0x298 <LED_vidOn+0x70>
 272:	17 c0       	rjmp	.+46     	; 0x2a2 <LED_vidOn+0x7a>
    {
    case LED_0:
        DIO_vidSetPinValue(LED_0_PORT, LED_0_PIN, STD_HIGH);
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	64 e0       	ldi	r22, 0x04	; 4
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_vidSetPinValue>
 27e:	11 c0       	rjmp	.+34     	; 0x2a2 <LED_vidOn+0x7a>
        break;
    case LED_1:
        DIO_vidSetPinValue(LED_1_PORT, LED_1_PIN, STD_HIGH);
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	65 e0       	ldi	r22, 0x05	; 5
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_vidSetPinValue>
 28a:	0b c0       	rjmp	.+22     	; 0x2a2 <LED_vidOn+0x7a>
        break;
    case LED_2:
        DIO_vidSetPinValue(LED_2_PORT, LED_2_PIN, STD_HIGH);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	66 e0       	ldi	r22, 0x06	; 6
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_vidSetPinValue>
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <LED_vidOn+0x7a>
        break;
    case LED_3:
        DIO_vidSetPinValue(LED_3_PORT, LED_3_PIN, STD_HIGH);
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	67 e0       	ldi	r22, 0x07	; 7
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_vidSetPinValue>
        break;
    default:
        break;
    }
}
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	cf 91       	pop	r28
 2aa:	df 91       	pop	r29
 2ac:	08 95       	ret

000002ae <LED_vidOff>:

void LED_vidOff(LED_Num_t led)
{
 2ae:	df 93       	push	r29
 2b0:	cf 93       	push	r28
 2b2:	00 d0       	rcall	.+0      	; 0x2b4 <LED_vidOff+0x6>
 2b4:	0f 92       	push	r0
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	89 83       	std	Y+1, r24	; 0x01
    switch (led)
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	28 2f       	mov	r18, r24
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	3b 83       	std	Y+3, r19	; 0x03
 2c4:	2a 83       	std	Y+2, r18	; 0x02
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	9b 81       	ldd	r25, Y+3	; 0x03
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	91 05       	cpc	r25, r1
 2ce:	d9 f0       	breq	.+54     	; 0x306 <LED_vidOff+0x58>
 2d0:	2a 81       	ldd	r18, Y+2	; 0x02
 2d2:	3b 81       	ldd	r19, Y+3	; 0x03
 2d4:	22 30       	cpi	r18, 0x02	; 2
 2d6:	31 05       	cpc	r19, r1
 2d8:	2c f4       	brge	.+10     	; 0x2e4 <LED_vidOff+0x36>
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	9b 81       	ldd	r25, Y+3	; 0x03
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	61 f0       	breq	.+24     	; 0x2fa <LED_vidOff+0x4c>
 2e2:	22 c0       	rjmp	.+68     	; 0x328 <LED_vidOff+0x7a>
 2e4:	2a 81       	ldd	r18, Y+2	; 0x02
 2e6:	3b 81       	ldd	r19, Y+3	; 0x03
 2e8:	22 30       	cpi	r18, 0x02	; 2
 2ea:	31 05       	cpc	r19, r1
 2ec:	91 f0       	breq	.+36     	; 0x312 <LED_vidOff+0x64>
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	9b 81       	ldd	r25, Y+3	; 0x03
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	91 05       	cpc	r25, r1
 2f6:	99 f0       	breq	.+38     	; 0x31e <LED_vidOff+0x70>
 2f8:	17 c0       	rjmp	.+46     	; 0x328 <LED_vidOff+0x7a>
    {
    case LED_0:
        DIO_vidSetPinValue(LED_0_PORT, LED_0_PIN, STD_LOW);
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_vidSetPinValue>
 304:	11 c0       	rjmp	.+34     	; 0x328 <LED_vidOff+0x7a>
        break;
    case LED_1:
        DIO_vidSetPinValue(LED_1_PORT, LED_1_PIN, STD_LOW);
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	65 e0       	ldi	r22, 0x05	; 5
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_vidSetPinValue>
 310:	0b c0       	rjmp	.+22     	; 0x328 <LED_vidOff+0x7a>
        break;
    case LED_2:
        DIO_vidSetPinValue(LED_2_PORT, LED_2_PIN, STD_LOW);
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	66 e0       	ldi	r22, 0x06	; 6
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_vidSetPinValue>
 31c:	05 c0       	rjmp	.+10     	; 0x328 <LED_vidOff+0x7a>
        break;
    case LED_3:
        DIO_vidSetPinValue(LED_3_PORT, LED_3_PIN, STD_LOW);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	67 e0       	ldi	r22, 0x07	; 7
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_vidSetPinValue>
        break;

    default:
        break;
    }
}
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	cf 91       	pop	r28
 330:	df 91       	pop	r29
 332:	08 95       	ret

00000334 <LED_vidToggle>:
void LED_vidToggle(LED_Num_t led)
{
 334:	df 93       	push	r29
 336:	cf 93       	push	r28
 338:	00 d0       	rcall	.+0      	; 0x33a <LED_vidToggle+0x6>
 33a:	0f 92       	push	r0
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
 340:	89 83       	std	Y+1, r24	; 0x01
    switch (led)
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	28 2f       	mov	r18, r24
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	3b 83       	std	Y+3, r19	; 0x03
 34a:	2a 83       	std	Y+2, r18	; 0x02
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	9b 81       	ldd	r25, Y+3	; 0x03
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	91 05       	cpc	r25, r1
 354:	d1 f0       	breq	.+52     	; 0x38a <LED_vidToggle+0x56>
 356:	2a 81       	ldd	r18, Y+2	; 0x02
 358:	3b 81       	ldd	r19, Y+3	; 0x03
 35a:	22 30       	cpi	r18, 0x02	; 2
 35c:	31 05       	cpc	r19, r1
 35e:	2c f4       	brge	.+10     	; 0x36a <LED_vidToggle+0x36>
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	9b 81       	ldd	r25, Y+3	; 0x03
 364:	00 97       	sbiw	r24, 0x00	; 0
 366:	61 f0       	breq	.+24     	; 0x380 <LED_vidToggle+0x4c>
 368:	1e c0       	rjmp	.+60     	; 0x3a6 <LED_vidToggle+0x72>
 36a:	2a 81       	ldd	r18, Y+2	; 0x02
 36c:	3b 81       	ldd	r19, Y+3	; 0x03
 36e:	22 30       	cpi	r18, 0x02	; 2
 370:	31 05       	cpc	r19, r1
 372:	81 f0       	breq	.+32     	; 0x394 <LED_vidToggle+0x60>
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	9b 81       	ldd	r25, Y+3	; 0x03
 378:	83 30       	cpi	r24, 0x03	; 3
 37a:	91 05       	cpc	r25, r1
 37c:	81 f0       	breq	.+32     	; 0x39e <LED_vidToggle+0x6a>
 37e:	13 c0       	rjmp	.+38     	; 0x3a6 <LED_vidToggle+0x72>
    {
    case LED_0:
        DIO_vidPinToggle(LED_0_PORT, LED_0_PIN);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	64 e0       	ldi	r22, 0x04	; 4
 384:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_vidPinToggle>
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <LED_vidToggle+0x72>
        break;
    case LED_1:
        DIO_vidPinToggle(LED_1_PORT, LED_1_PIN);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	65 e0       	ldi	r22, 0x05	; 5
 38e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_vidPinToggle>
 392:	09 c0       	rjmp	.+18     	; 0x3a6 <LED_vidToggle+0x72>
        break;
    case LED_2:
        DIO_vidPinToggle(LED_2_PORT, LED_2_PIN);
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	66 e0       	ldi	r22, 0x06	; 6
 398:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_vidPinToggle>
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <LED_vidToggle+0x72>
        break;
    case LED_3:
        DIO_vidPinToggle(LED_3_PORT, LED_3_PIN);
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	67 e0       	ldi	r22, 0x07	; 7
 3a2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_vidPinToggle>
        break;
    default:
        break;
    }
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	cf 91       	pop	r28
 3ae:	df 91       	pop	r29
 3b0:	08 95       	ret

000003b2 <DIO_vidSetPortDirection>:
#include"../../01-LIB/01-STD_TYPES/STD_TYPES.h"
#include"../../01-LIB/02-BIT_MATH/BIT_MATH.h"
#include"../registers.h"
#include"Dio.h"

void DIO_vidSetPortDirection (DIO_Port_t port,u8_t value){
 3b2:	df 93       	push	r29
 3b4:	cf 93       	push	r28
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <DIO_vidSetPortDirection+0x6>
 3b8:	00 d0       	rcall	.+0      	; 0x3ba <DIO_vidSetPortDirection+0x8>
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
 3be:	89 83       	std	Y+1, r24	; 0x01
 3c0:	6a 83       	std	Y+2, r22	; 0x02
    switch (port){
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	3c 83       	std	Y+4, r19	; 0x04
 3ca:	2b 83       	std	Y+3, r18	; 0x03
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	9c 81       	ldd	r25, Y+4	; 0x04
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	91 05       	cpc	r25, r1
 3d4:	d1 f0       	breq	.+52     	; 0x40a <DIO_vidSetPortDirection+0x58>
 3d6:	2b 81       	ldd	r18, Y+3	; 0x03
 3d8:	3c 81       	ldd	r19, Y+4	; 0x04
 3da:	22 30       	cpi	r18, 0x02	; 2
 3dc:	31 05       	cpc	r19, r1
 3de:	2c f4       	brge	.+10     	; 0x3ea <DIO_vidSetPortDirection+0x38>
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	9c 81       	ldd	r25, Y+4	; 0x04
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	61 f0       	breq	.+24     	; 0x400 <DIO_vidSetPortDirection+0x4e>
 3e8:	1e c0       	rjmp	.+60     	; 0x426 <DIO_vidSetPortDirection+0x74>
 3ea:	2b 81       	ldd	r18, Y+3	; 0x03
 3ec:	3c 81       	ldd	r19, Y+4	; 0x04
 3ee:	22 30       	cpi	r18, 0x02	; 2
 3f0:	31 05       	cpc	r19, r1
 3f2:	81 f0       	breq	.+32     	; 0x414 <DIO_vidSetPortDirection+0x62>
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	9c 81       	ldd	r25, Y+4	; 0x04
 3f8:	83 30       	cpi	r24, 0x03	; 3
 3fa:	91 05       	cpc	r25, r1
 3fc:	81 f0       	breq	.+32     	; 0x41e <DIO_vidSetPortDirection+0x6c>
 3fe:	13 c0       	rjmp	.+38     	; 0x426 <DIO_vidSetPortDirection+0x74>
	case DIO_PORTA: DDRA=value;
 400:	ea e3       	ldi	r30, 0x3A	; 58
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	8a 81       	ldd	r24, Y+2	; 0x02
 406:	80 83       	st	Z, r24
 408:	0e c0       	rjmp	.+28     	; 0x426 <DIO_vidSetPortDirection+0x74>
	break;
	case DIO_PORTB: DDRB=value;
 40a:	e7 e3       	ldi	r30, 0x37	; 55
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	80 83       	st	Z, r24
 412:	09 c0       	rjmp	.+18     	; 0x426 <DIO_vidSetPortDirection+0x74>
	break;
	case DIO_PORTC: DDRC=value;
 414:	e4 e3       	ldi	r30, 0x34	; 52
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	8a 81       	ldd	r24, Y+2	; 0x02
 41a:	80 83       	st	Z, r24
 41c:	04 c0       	rjmp	.+8      	; 0x426 <DIO_vidSetPortDirection+0x74>
	break;
	case DIO_PORTD: DDRD=value;
 41e:	e1 e3       	ldi	r30, 0x31	; 49
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	80 83       	st	Z, r24
	break;
	}
}
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	cf 91       	pop	r28
 430:	df 91       	pop	r29
 432:	08 95       	ret

00000434 <DIO_vidSetPortValue>:
void DIO_vidSetPortValue     (DIO_Port_t port,u8_t value){
 434:	df 93       	push	r29
 436:	cf 93       	push	r28
 438:	00 d0       	rcall	.+0      	; 0x43a <DIO_vidSetPortValue+0x6>
 43a:	00 d0       	rcall	.+0      	; 0x43c <DIO_vidSetPortValue+0x8>
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	89 83       	std	Y+1, r24	; 0x01
 442:	6a 83       	std	Y+2, r22	; 0x02
    switch (port){
 444:	89 81       	ldd	r24, Y+1	; 0x01
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	3c 83       	std	Y+4, r19	; 0x04
 44c:	2b 83       	std	Y+3, r18	; 0x03
 44e:	8b 81       	ldd	r24, Y+3	; 0x03
 450:	9c 81       	ldd	r25, Y+4	; 0x04
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	91 05       	cpc	r25, r1
 456:	d1 f0       	breq	.+52     	; 0x48c <DIO_vidSetPortValue+0x58>
 458:	2b 81       	ldd	r18, Y+3	; 0x03
 45a:	3c 81       	ldd	r19, Y+4	; 0x04
 45c:	22 30       	cpi	r18, 0x02	; 2
 45e:	31 05       	cpc	r19, r1
 460:	2c f4       	brge	.+10     	; 0x46c <DIO_vidSetPortValue+0x38>
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	9c 81       	ldd	r25, Y+4	; 0x04
 466:	00 97       	sbiw	r24, 0x00	; 0
 468:	61 f0       	breq	.+24     	; 0x482 <DIO_vidSetPortValue+0x4e>
 46a:	1e c0       	rjmp	.+60     	; 0x4a8 <DIO_vidSetPortValue+0x74>
 46c:	2b 81       	ldd	r18, Y+3	; 0x03
 46e:	3c 81       	ldd	r19, Y+4	; 0x04
 470:	22 30       	cpi	r18, 0x02	; 2
 472:	31 05       	cpc	r19, r1
 474:	81 f0       	breq	.+32     	; 0x496 <DIO_vidSetPortValue+0x62>
 476:	8b 81       	ldd	r24, Y+3	; 0x03
 478:	9c 81       	ldd	r25, Y+4	; 0x04
 47a:	83 30       	cpi	r24, 0x03	; 3
 47c:	91 05       	cpc	r25, r1
 47e:	81 f0       	breq	.+32     	; 0x4a0 <DIO_vidSetPortValue+0x6c>
 480:	13 c0       	rjmp	.+38     	; 0x4a8 <DIO_vidSetPortValue+0x74>
	case DIO_PORTA: PORTA=value;
 482:	eb e3       	ldi	r30, 0x3B	; 59
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	80 83       	st	Z, r24
 48a:	0e c0       	rjmp	.+28     	; 0x4a8 <DIO_vidSetPortValue+0x74>
	break;
	case DIO_PORTB: PORTB=value;
 48c:	e8 e3       	ldi	r30, 0x38	; 56
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	80 83       	st	Z, r24
 494:	09 c0       	rjmp	.+18     	; 0x4a8 <DIO_vidSetPortValue+0x74>
	break;
	case DIO_PORTC: PORTC=value;
 496:	e5 e3       	ldi	r30, 0x35	; 53
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	8a 81       	ldd	r24, Y+2	; 0x02
 49c:	80 83       	st	Z, r24
 49e:	04 c0       	rjmp	.+8      	; 0x4a8 <DIO_vidSetPortValue+0x74>
	break;
	case DIO_PORTD: PORTD=value;
 4a0:	e2 e3       	ldi	r30, 0x32	; 50
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	8a 81       	ldd	r24, Y+2	; 0x02
 4a6:	80 83       	st	Z, r24
	break;
	}
}
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	cf 91       	pop	r28
 4b2:	df 91       	pop	r29
 4b4:	08 95       	ret

000004b6 <DIO_u8ReadPortValue>:
u8_t DIO_u8ReadPortValue     (DIO_Port_t port){
 4b6:	df 93       	push	r29
 4b8:	cf 93       	push	r28
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <DIO_u8ReadPortValue+0x6>
 4bc:	00 d0       	rcall	.+0      	; 0x4be <DIO_u8ReadPortValue+0x8>
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
 4c2:	8a 83       	std	Y+2, r24	; 0x02
    volatile u8_t value;
	switch (port){
 4c4:	8a 81       	ldd	r24, Y+2	; 0x02
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	3c 83       	std	Y+4, r19	; 0x04
 4cc:	2b 83       	std	Y+3, r18	; 0x03
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	9c 81       	ldd	r25, Y+4	; 0x04
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	91 05       	cpc	r25, r1
 4d6:	d1 f0       	breq	.+52     	; 0x50c <DIO_u8ReadPortValue+0x56>
 4d8:	2b 81       	ldd	r18, Y+3	; 0x03
 4da:	3c 81       	ldd	r19, Y+4	; 0x04
 4dc:	22 30       	cpi	r18, 0x02	; 2
 4de:	31 05       	cpc	r19, r1
 4e0:	2c f4       	brge	.+10     	; 0x4ec <DIO_u8ReadPortValue+0x36>
 4e2:	8b 81       	ldd	r24, Y+3	; 0x03
 4e4:	9c 81       	ldd	r25, Y+4	; 0x04
 4e6:	00 97       	sbiw	r24, 0x00	; 0
 4e8:	61 f0       	breq	.+24     	; 0x502 <DIO_u8ReadPortValue+0x4c>
 4ea:	1e c0       	rjmp	.+60     	; 0x528 <DIO_u8ReadPortValue+0x72>
 4ec:	2b 81       	ldd	r18, Y+3	; 0x03
 4ee:	3c 81       	ldd	r19, Y+4	; 0x04
 4f0:	22 30       	cpi	r18, 0x02	; 2
 4f2:	31 05       	cpc	r19, r1
 4f4:	81 f0       	breq	.+32     	; 0x516 <DIO_u8ReadPortValue+0x60>
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	9c 81       	ldd	r25, Y+4	; 0x04
 4fa:	83 30       	cpi	r24, 0x03	; 3
 4fc:	91 05       	cpc	r25, r1
 4fe:	81 f0       	breq	.+32     	; 0x520 <DIO_u8ReadPortValue+0x6a>
 500:	13 c0       	rjmp	.+38     	; 0x528 <DIO_u8ReadPortValue+0x72>
	case DIO_PORTA: value=PINA;
 502:	e9 e3       	ldi	r30, 0x39	; 57
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	89 83       	std	Y+1, r24	; 0x01
 50a:	0e c0       	rjmp	.+28     	; 0x528 <DIO_u8ReadPortValue+0x72>
	break;
	case DIO_PORTB: value=PINB;
 50c:	e6 e3       	ldi	r30, 0x36	; 54
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	89 83       	std	Y+1, r24	; 0x01
 514:	09 c0       	rjmp	.+18     	; 0x528 <DIO_u8ReadPortValue+0x72>
	break;
	case DIO_PORTC: value=PINC;
 516:	e3 e3       	ldi	r30, 0x33	; 51
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	89 83       	std	Y+1, r24	; 0x01
 51e:	04 c0       	rjmp	.+8      	; 0x528 <DIO_u8ReadPortValue+0x72>
	break;
	case DIO_PORTD: value=PIND;
 520:	e0 e3       	ldi	r30, 0x30	; 48
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	89 83       	std	Y+1, r24	; 0x01
	break;

	}
return value;
 528:	89 81       	ldd	r24, Y+1	; 0x01
}
 52a:	0f 90       	pop	r0
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	0f 90       	pop	r0
 532:	cf 91       	pop	r28
 534:	df 91       	pop	r29
 536:	08 95       	ret

00000538 <DIO_vidSetPinDirection>:

void DIO_vidSetPinDirection (DIO_Port_t port, DIO_Pin_t pin, DIO_PinDirection_t value){
 538:	df 93       	push	r29
 53a:	cf 93       	push	r28
 53c:	00 d0       	rcall	.+0      	; 0x53e <DIO_vidSetPinDirection+0x6>
 53e:	00 d0       	rcall	.+0      	; 0x540 <DIO_vidSetPinDirection+0x8>
 540:	0f 92       	push	r0
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	89 83       	std	Y+1, r24	; 0x01
 548:	6a 83       	std	Y+2, r22	; 0x02
 54a:	4b 83       	std	Y+3, r20	; 0x03
    switch (port)
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	28 2f       	mov	r18, r24
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	3d 83       	std	Y+5, r19	; 0x05
 554:	2c 83       	std	Y+4, r18	; 0x04
 556:	8c 81       	ldd	r24, Y+4	; 0x04
 558:	9d 81       	ldd	r25, Y+5	; 0x05
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	91 05       	cpc	r25, r1
 55e:	09 f4       	brne	.+2      	; 0x562 <DIO_vidSetPinDirection+0x2a>
 560:	47 c0       	rjmp	.+142    	; 0x5f0 <DIO_vidSetPinDirection+0xb8>
 562:	2c 81       	ldd	r18, Y+4	; 0x04
 564:	3d 81       	ldd	r19, Y+5	; 0x05
 566:	22 30       	cpi	r18, 0x02	; 2
 568:	31 05       	cpc	r19, r1
 56a:	2c f4       	brge	.+10     	; 0x576 <DIO_vidSetPinDirection+0x3e>
 56c:	8c 81       	ldd	r24, Y+4	; 0x04
 56e:	9d 81       	ldd	r25, Y+5	; 0x05
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	71 f0       	breq	.+28     	; 0x590 <DIO_vidSetPinDirection+0x58>
 574:	cb c0       	rjmp	.+406    	; 0x70c <DIO_vidSetPinDirection+0x1d4>
 576:	2c 81       	ldd	r18, Y+4	; 0x04
 578:	3d 81       	ldd	r19, Y+5	; 0x05
 57a:	22 30       	cpi	r18, 0x02	; 2
 57c:	31 05       	cpc	r19, r1
 57e:	09 f4       	brne	.+2      	; 0x582 <DIO_vidSetPinDirection+0x4a>
 580:	67 c0       	rjmp	.+206    	; 0x650 <DIO_vidSetPinDirection+0x118>
 582:	8c 81       	ldd	r24, Y+4	; 0x04
 584:	9d 81       	ldd	r25, Y+5	; 0x05
 586:	83 30       	cpi	r24, 0x03	; 3
 588:	91 05       	cpc	r25, r1
 58a:	09 f4       	brne	.+2      	; 0x58e <DIO_vidSetPinDirection+0x56>
 58c:	91 c0       	rjmp	.+290    	; 0x6b0 <DIO_vidSetPinDirection+0x178>
 58e:	be c0       	rjmp	.+380    	; 0x70c <DIO_vidSetPinDirection+0x1d4>
    {
    case DIO_PORTA:
        if (value == OUTPUT)
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	a1 f4       	brne	.+40     	; 0x5be <DIO_vidSetPinDirection+0x86>
            SET_BIT(DDRA, pin);
 596:	aa e3       	ldi	r26, 0x3A	; 58
 598:	b0 e0       	ldi	r27, 0x00	; 0
 59a:	ea e3       	ldi	r30, 0x3A	; 58
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	48 2f       	mov	r20, r24
 5a2:	8a 81       	ldd	r24, Y+2	; 0x02
 5a4:	28 2f       	mov	r18, r24
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 2e       	mov	r0, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_vidSetPinDirection+0x7c>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_vidSetPinDirection+0x78>
 5b8:	84 2b       	or	r24, r20
 5ba:	8c 93       	st	X, r24
 5bc:	a7 c0       	rjmp	.+334    	; 0x70c <DIO_vidSetPinDirection+0x1d4>
        else if (value == INPUT)
 5be:	8b 81       	ldd	r24, Y+3	; 0x03
 5c0:	88 23       	and	r24, r24
 5c2:	09 f0       	breq	.+2      	; 0x5c6 <DIO_vidSetPinDirection+0x8e>
 5c4:	a3 c0       	rjmp	.+326    	; 0x70c <DIO_vidSetPinDirection+0x1d4>
            CLR_BIT(DDRA, pin);
 5c6:	aa e3       	ldi	r26, 0x3A	; 58
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	ea e3       	ldi	r30, 0x3A	; 58
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	48 2f       	mov	r20, r24
 5d2:	8a 81       	ldd	r24, Y+2	; 0x02
 5d4:	28 2f       	mov	r18, r24
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 2e       	mov	r0, r18
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_vidSetPinDirection+0xac>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	0a 94       	dec	r0
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_vidSetPinDirection+0xa8>
 5e8:	80 95       	com	r24
 5ea:	84 23       	and	r24, r20
 5ec:	8c 93       	st	X, r24
 5ee:	8e c0       	rjmp	.+284    	; 0x70c <DIO_vidSetPinDirection+0x1d4>
        break;
    case DIO_PORTB:
        if (value == OUTPUT)
 5f0:	8b 81       	ldd	r24, Y+3	; 0x03
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	a1 f4       	brne	.+40     	; 0x61e <DIO_vidSetPinDirection+0xe6>
            SET_BIT(DDRB, pin);
 5f6:	a7 e3       	ldi	r26, 0x37	; 55
 5f8:	b0 e0       	ldi	r27, 0x00	; 0
 5fa:	e7 e3       	ldi	r30, 0x37	; 55
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	48 2f       	mov	r20, r24
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	28 2f       	mov	r18, r24
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	02 2e       	mov	r0, r18
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_vidSetPinDirection+0xdc>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	0a 94       	dec	r0
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_vidSetPinDirection+0xd8>
 618:	84 2b       	or	r24, r20
 61a:	8c 93       	st	X, r24
 61c:	77 c0       	rjmp	.+238    	; 0x70c <DIO_vidSetPinDirection+0x1d4>
        else if (value == INPUT)
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	88 23       	and	r24, r24
 622:	09 f0       	breq	.+2      	; 0x626 <DIO_vidSetPinDirection+0xee>
 624:	73 c0       	rjmp	.+230    	; 0x70c <DIO_vidSetPinDirection+0x1d4>
            CLR_BIT(DDRB, pin);
 626:	a7 e3       	ldi	r26, 0x37	; 55
 628:	b0 e0       	ldi	r27, 0x00	; 0
 62a:	e7 e3       	ldi	r30, 0x37	; 55
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	48 2f       	mov	r20, r24
 632:	8a 81       	ldd	r24, Y+2	; 0x02
 634:	28 2f       	mov	r18, r24
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	02 2e       	mov	r0, r18
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_vidSetPinDirection+0x10c>
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	0a 94       	dec	r0
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_vidSetPinDirection+0x108>
 648:	80 95       	com	r24
 64a:	84 23       	and	r24, r20
 64c:	8c 93       	st	X, r24
 64e:	5e c0       	rjmp	.+188    	; 0x70c <DIO_vidSetPinDirection+0x1d4>
        break;
    case DIO_PORTC:
        if (value == OUTPUT)
 650:	8b 81       	ldd	r24, Y+3	; 0x03
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	a1 f4       	brne	.+40     	; 0x67e <DIO_vidSetPinDirection+0x146>
            SET_BIT(DDRC, pin);
 656:	a4 e3       	ldi	r26, 0x34	; 52
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	e4 e3       	ldi	r30, 0x34	; 52
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	48 2f       	mov	r20, r24
 662:	8a 81       	ldd	r24, Y+2	; 0x02
 664:	28 2f       	mov	r18, r24
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 2e       	mov	r0, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_vidSetPinDirection+0x13c>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	0a 94       	dec	r0
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_vidSetPinDirection+0x138>
 678:	84 2b       	or	r24, r20
 67a:	8c 93       	st	X, r24
 67c:	47 c0       	rjmp	.+142    	; 0x70c <DIO_vidSetPinDirection+0x1d4>
        else if (value == INPUT)
 67e:	8b 81       	ldd	r24, Y+3	; 0x03
 680:	88 23       	and	r24, r24
 682:	09 f0       	breq	.+2      	; 0x686 <DIO_vidSetPinDirection+0x14e>
 684:	43 c0       	rjmp	.+134    	; 0x70c <DIO_vidSetPinDirection+0x1d4>
            CLR_BIT(DDRC, pin);
 686:	a4 e3       	ldi	r26, 0x34	; 52
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e4 e3       	ldi	r30, 0x34	; 52
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	48 2f       	mov	r20, r24
 692:	8a 81       	ldd	r24, Y+2	; 0x02
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 2e       	mov	r0, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_vidSetPinDirection+0x16c>
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	0a 94       	dec	r0
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_vidSetPinDirection+0x168>
 6a8:	80 95       	com	r24
 6aa:	84 23       	and	r24, r20
 6ac:	8c 93       	st	X, r24
 6ae:	2e c0       	rjmp	.+92     	; 0x70c <DIO_vidSetPinDirection+0x1d4>
        break;
    case DIO_PORTD:
        if (value == OUTPUT)
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	a1 f4       	brne	.+40     	; 0x6de <DIO_vidSetPinDirection+0x1a6>
            SET_BIT(DDRD, pin);
 6b6:	a1 e3       	ldi	r26, 0x31	; 49
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	e1 e3       	ldi	r30, 0x31	; 49
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	48 2f       	mov	r20, r24
 6c2:	8a 81       	ldd	r24, Y+2	; 0x02
 6c4:	28 2f       	mov	r18, r24
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 2e       	mov	r0, r18
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_vidSetPinDirection+0x19c>
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	0a 94       	dec	r0
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_vidSetPinDirection+0x198>
 6d8:	84 2b       	or	r24, r20
 6da:	8c 93       	st	X, r24
 6dc:	17 c0       	rjmp	.+46     	; 0x70c <DIO_vidSetPinDirection+0x1d4>
        else if (value == INPUT)
 6de:	8b 81       	ldd	r24, Y+3	; 0x03
 6e0:	88 23       	and	r24, r24
 6e2:	a1 f4       	brne	.+40     	; 0x70c <DIO_vidSetPinDirection+0x1d4>
            CLR_BIT(DDRD, pin);
 6e4:	a1 e3       	ldi	r26, 0x31	; 49
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	e1 e3       	ldi	r30, 0x31	; 49
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	48 2f       	mov	r20, r24
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 2e       	mov	r0, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_vidSetPinDirection+0x1ca>
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	0a 94       	dec	r0
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_vidSetPinDirection+0x1c6>
 706:	80 95       	com	r24
 708:	84 23       	and	r24, r20
 70a:	8c 93       	st	X, r24
        break;
    }
}
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	0f 90       	pop	r0
 716:	cf 91       	pop	r28
 718:	df 91       	pop	r29
 71a:	08 95       	ret

0000071c <DIO_vidSetPinValue>:
void DIO_vidSetPinValue     (DIO_Port_t port,DIO_Pin_t pin,u8_t value){
 71c:	df 93       	push	r29
 71e:	cf 93       	push	r28
 720:	00 d0       	rcall	.+0      	; 0x722 <DIO_vidSetPinValue+0x6>
 722:	00 d0       	rcall	.+0      	; 0x724 <DIO_vidSetPinValue+0x8>
 724:	0f 92       	push	r0
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
 72a:	89 83       	std	Y+1, r24	; 0x01
 72c:	6a 83       	std	Y+2, r22	; 0x02
 72e:	4b 83       	std	Y+3, r20	; 0x03
    switch(port){
 730:	89 81       	ldd	r24, Y+1	; 0x01
 732:	28 2f       	mov	r18, r24
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	3d 83       	std	Y+5, r19	; 0x05
 738:	2c 83       	std	Y+4, r18	; 0x04
 73a:	8c 81       	ldd	r24, Y+4	; 0x04
 73c:	9d 81       	ldd	r25, Y+5	; 0x05
 73e:	81 30       	cpi	r24, 0x01	; 1
 740:	91 05       	cpc	r25, r1
 742:	09 f4       	brne	.+2      	; 0x746 <DIO_vidSetPinValue+0x2a>
 744:	47 c0       	rjmp	.+142    	; 0x7d4 <DIO_vidSetPinValue+0xb8>
 746:	2c 81       	ldd	r18, Y+4	; 0x04
 748:	3d 81       	ldd	r19, Y+5	; 0x05
 74a:	22 30       	cpi	r18, 0x02	; 2
 74c:	31 05       	cpc	r19, r1
 74e:	2c f4       	brge	.+10     	; 0x75a <DIO_vidSetPinValue+0x3e>
 750:	8c 81       	ldd	r24, Y+4	; 0x04
 752:	9d 81       	ldd	r25, Y+5	; 0x05
 754:	00 97       	sbiw	r24, 0x00	; 0
 756:	71 f0       	breq	.+28     	; 0x774 <DIO_vidSetPinValue+0x58>
 758:	cb c0       	rjmp	.+406    	; 0x8f0 <__stack+0x91>
 75a:	2c 81       	ldd	r18, Y+4	; 0x04
 75c:	3d 81       	ldd	r19, Y+5	; 0x05
 75e:	22 30       	cpi	r18, 0x02	; 2
 760:	31 05       	cpc	r19, r1
 762:	09 f4       	brne	.+2      	; 0x766 <DIO_vidSetPinValue+0x4a>
 764:	67 c0       	rjmp	.+206    	; 0x834 <DIO_vidSetPinValue+0x118>
 766:	8c 81       	ldd	r24, Y+4	; 0x04
 768:	9d 81       	ldd	r25, Y+5	; 0x05
 76a:	83 30       	cpi	r24, 0x03	; 3
 76c:	91 05       	cpc	r25, r1
 76e:	09 f4       	brne	.+2      	; 0x772 <DIO_vidSetPinValue+0x56>
 770:	91 c0       	rjmp	.+290    	; 0x894 <__stack+0x35>
 772:	be c0       	rjmp	.+380    	; 0x8f0 <__stack+0x91>
		case DIO_PORTA:
        if (value == STD_HIGH)
 774:	8b 81       	ldd	r24, Y+3	; 0x03
 776:	81 30       	cpi	r24, 0x01	; 1
 778:	a1 f4       	brne	.+40     	; 0x7a2 <DIO_vidSetPinValue+0x86>
            SET_BIT(PORTA, pin);
 77a:	ab e3       	ldi	r26, 0x3B	; 59
 77c:	b0 e0       	ldi	r27, 0x00	; 0
 77e:	eb e3       	ldi	r30, 0x3B	; 59
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	48 2f       	mov	r20, r24
 786:	8a 81       	ldd	r24, Y+2	; 0x02
 788:	28 2f       	mov	r18, r24
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	02 2e       	mov	r0, r18
 792:	02 c0       	rjmp	.+4      	; 0x798 <DIO_vidSetPinValue+0x7c>
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	0a 94       	dec	r0
 79a:	e2 f7       	brpl	.-8      	; 0x794 <DIO_vidSetPinValue+0x78>
 79c:	84 2b       	or	r24, r20
 79e:	8c 93       	st	X, r24
 7a0:	a7 c0       	rjmp	.+334    	; 0x8f0 <__stack+0x91>
        else if (value == STD_LOW)
 7a2:	8b 81       	ldd	r24, Y+3	; 0x03
 7a4:	88 23       	and	r24, r24
 7a6:	09 f0       	breq	.+2      	; 0x7aa <DIO_vidSetPinValue+0x8e>
 7a8:	a3 c0       	rjmp	.+326    	; 0x8f0 <__stack+0x91>
        	CLR_BIT(PORTA, pin);
 7aa:	ab e3       	ldi	r26, 0x3B	; 59
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	eb e3       	ldi	r30, 0x3B	; 59
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	48 2f       	mov	r20, r24
 7b6:	8a 81       	ldd	r24, Y+2	; 0x02
 7b8:	28 2f       	mov	r18, r24
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	02 2e       	mov	r0, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_vidSetPinValue+0xac>
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	0a 94       	dec	r0
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_vidSetPinValue+0xa8>
 7cc:	80 95       	com	r24
 7ce:	84 23       	and	r24, r20
 7d0:	8c 93       	st	X, r24
 7d2:	8e c0       	rjmp	.+284    	; 0x8f0 <__stack+0x91>
        break;
    case DIO_PORTB:
        if (value == STD_HIGH)
 7d4:	8b 81       	ldd	r24, Y+3	; 0x03
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	a1 f4       	brne	.+40     	; 0x802 <DIO_vidSetPinValue+0xe6>
            SET_BIT(PORTB, pin);
 7da:	a8 e3       	ldi	r26, 0x38	; 56
 7dc:	b0 e0       	ldi	r27, 0x00	; 0
 7de:	e8 e3       	ldi	r30, 0x38	; 56
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	48 2f       	mov	r20, r24
 7e6:	8a 81       	ldd	r24, Y+2	; 0x02
 7e8:	28 2f       	mov	r18, r24
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 2e       	mov	r0, r18
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_vidSetPinValue+0xdc>
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	0a 94       	dec	r0
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_vidSetPinValue+0xd8>
 7fc:	84 2b       	or	r24, r20
 7fe:	8c 93       	st	X, r24
 800:	77 c0       	rjmp	.+238    	; 0x8f0 <__stack+0x91>
        else if (value == STD_LOW)
 802:	8b 81       	ldd	r24, Y+3	; 0x03
 804:	88 23       	and	r24, r24
 806:	09 f0       	breq	.+2      	; 0x80a <DIO_vidSetPinValue+0xee>
 808:	73 c0       	rjmp	.+230    	; 0x8f0 <__stack+0x91>
            CLR_BIT(PORTB, pin);
 80a:	a8 e3       	ldi	r26, 0x38	; 56
 80c:	b0 e0       	ldi	r27, 0x00	; 0
 80e:	e8 e3       	ldi	r30, 0x38	; 56
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	48 2f       	mov	r20, r24
 816:	8a 81       	ldd	r24, Y+2	; 0x02
 818:	28 2f       	mov	r18, r24
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	02 2e       	mov	r0, r18
 822:	02 c0       	rjmp	.+4      	; 0x828 <DIO_vidSetPinValue+0x10c>
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	0a 94       	dec	r0
 82a:	e2 f7       	brpl	.-8      	; 0x824 <DIO_vidSetPinValue+0x108>
 82c:	80 95       	com	r24
 82e:	84 23       	and	r24, r20
 830:	8c 93       	st	X, r24
 832:	5e c0       	rjmp	.+188    	; 0x8f0 <__stack+0x91>
        break;
    case DIO_PORTC:
        if (value == STD_HIGH)
 834:	8b 81       	ldd	r24, Y+3	; 0x03
 836:	81 30       	cpi	r24, 0x01	; 1
 838:	a1 f4       	brne	.+40     	; 0x862 <__stack+0x3>
            SET_BIT(PORTC, pin);
 83a:	a5 e3       	ldi	r26, 0x35	; 53
 83c:	b0 e0       	ldi	r27, 0x00	; 0
 83e:	e5 e3       	ldi	r30, 0x35	; 53
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	48 2f       	mov	r20, r24
 846:	8a 81       	ldd	r24, Y+2	; 0x02
 848:	28 2f       	mov	r18, r24
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 2e       	mov	r0, r18
 852:	02 c0       	rjmp	.+4      	; 0x858 <DIO_vidSetPinValue+0x13c>
 854:	88 0f       	add	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	0a 94       	dec	r0
 85a:	e2 f7       	brpl	.-8      	; 0x854 <DIO_vidSetPinValue+0x138>
 85c:	84 2b       	or	r24, r20
 85e:	8c 93       	st	X, r24
 860:	47 c0       	rjmp	.+142    	; 0x8f0 <__stack+0x91>
        else if (value == STD_LOW)
 862:	8b 81       	ldd	r24, Y+3	; 0x03
 864:	88 23       	and	r24, r24
 866:	09 f0       	breq	.+2      	; 0x86a <__stack+0xb>
 868:	43 c0       	rjmp	.+134    	; 0x8f0 <__stack+0x91>
            CLR_BIT(PORTC, pin);
 86a:	a5 e3       	ldi	r26, 0x35	; 53
 86c:	b0 e0       	ldi	r27, 0x00	; 0
 86e:	e5 e3       	ldi	r30, 0x35	; 53
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	48 2f       	mov	r20, r24
 876:	8a 81       	ldd	r24, Y+2	; 0x02
 878:	28 2f       	mov	r18, r24
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 2e       	mov	r0, r18
 882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
 884:	88 0f       	add	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	0a 94       	dec	r0
 88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
 88c:	80 95       	com	r24
 88e:	84 23       	and	r24, r20
 890:	8c 93       	st	X, r24
 892:	2e c0       	rjmp	.+92     	; 0x8f0 <__stack+0x91>
        break;
    case DIO_PORTD:
        if (value == STD_HIGH)
 894:	8b 81       	ldd	r24, Y+3	; 0x03
 896:	81 30       	cpi	r24, 0x01	; 1
 898:	a1 f4       	brne	.+40     	; 0x8c2 <__stack+0x63>
            SET_BIT(PORTD, pin);
 89a:	a2 e3       	ldi	r26, 0x32	; 50
 89c:	b0 e0       	ldi	r27, 0x00	; 0
 89e:	e2 e3       	ldi	r30, 0x32	; 50
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	80 81       	ld	r24, Z
 8a4:	48 2f       	mov	r20, r24
 8a6:	8a 81       	ldd	r24, Y+2	; 0x02
 8a8:	28 2f       	mov	r18, r24
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	02 2e       	mov	r0, r18
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__stack+0x59>
 8b4:	88 0f       	add	r24, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	0a 94       	dec	r0
 8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <__stack+0x55>
 8bc:	84 2b       	or	r24, r20
 8be:	8c 93       	st	X, r24
 8c0:	17 c0       	rjmp	.+46     	; 0x8f0 <__stack+0x91>
        else if (value == STD_LOW)
 8c2:	8b 81       	ldd	r24, Y+3	; 0x03
 8c4:	88 23       	and	r24, r24
 8c6:	a1 f4       	brne	.+40     	; 0x8f0 <__stack+0x91>
            CLR_BIT(PORTD, pin);
 8c8:	a2 e3       	ldi	r26, 0x32	; 50
 8ca:	b0 e0       	ldi	r27, 0x00	; 0
 8cc:	e2 e3       	ldi	r30, 0x32	; 50
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 81       	ld	r24, Z
 8d2:	48 2f       	mov	r20, r24
 8d4:	8a 81       	ldd	r24, Y+2	; 0x02
 8d6:	28 2f       	mov	r18, r24
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	02 2e       	mov	r0, r18
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__stack+0x87>
 8e2:	88 0f       	add	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	0a 94       	dec	r0
 8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <__stack+0x83>
 8ea:	80 95       	com	r24
 8ec:	84 23       	and	r24, r20
 8ee:	8c 93       	st	X, r24
        break;

		}
}
 8f0:	0f 90       	pop	r0
 8f2:	0f 90       	pop	r0
 8f4:	0f 90       	pop	r0
 8f6:	0f 90       	pop	r0
 8f8:	0f 90       	pop	r0
 8fa:	cf 91       	pop	r28
 8fc:	df 91       	pop	r29
 8fe:	08 95       	ret

00000900 <DIO_u8ReadPinValue>:
u8_t DIO_u8ReadPinValue     (DIO_Port_t port,DIO_Pin_t pin){
 900:	df 93       	push	r29
 902:	cf 93       	push	r28
 904:	00 d0       	rcall	.+0      	; 0x906 <DIO_u8ReadPinValue+0x6>
 906:	00 d0       	rcall	.+0      	; 0x908 <DIO_u8ReadPinValue+0x8>
 908:	0f 92       	push	r0
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62
 90e:	8a 83       	std	Y+2, r24	; 0x02
 910:	6b 83       	std	Y+3, r22	; 0x03
    volatile u8_t value;
	switch(port){
 912:	8a 81       	ldd	r24, Y+2	; 0x02
 914:	28 2f       	mov	r18, r24
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	3d 83       	std	Y+5, r19	; 0x05
 91a:	2c 83       	std	Y+4, r18	; 0x04
 91c:	4c 81       	ldd	r20, Y+4	; 0x04
 91e:	5d 81       	ldd	r21, Y+5	; 0x05
 920:	41 30       	cpi	r20, 0x01	; 1
 922:	51 05       	cpc	r21, r1
 924:	41 f1       	breq	.+80     	; 0x976 <DIO_u8ReadPinValue+0x76>
 926:	8c 81       	ldd	r24, Y+4	; 0x04
 928:	9d 81       	ldd	r25, Y+5	; 0x05
 92a:	82 30       	cpi	r24, 0x02	; 2
 92c:	91 05       	cpc	r25, r1
 92e:	34 f4       	brge	.+12     	; 0x93c <DIO_u8ReadPinValue+0x3c>
 930:	2c 81       	ldd	r18, Y+4	; 0x04
 932:	3d 81       	ldd	r19, Y+5	; 0x05
 934:	21 15       	cp	r18, r1
 936:	31 05       	cpc	r19, r1
 938:	61 f0       	breq	.+24     	; 0x952 <DIO_u8ReadPinValue+0x52>
 93a:	52 c0       	rjmp	.+164    	; 0x9e0 <DIO_u8ReadPinValue+0xe0>
 93c:	4c 81       	ldd	r20, Y+4	; 0x04
 93e:	5d 81       	ldd	r21, Y+5	; 0x05
 940:	42 30       	cpi	r20, 0x02	; 2
 942:	51 05       	cpc	r21, r1
 944:	51 f1       	breq	.+84     	; 0x99a <DIO_u8ReadPinValue+0x9a>
 946:	8c 81       	ldd	r24, Y+4	; 0x04
 948:	9d 81       	ldd	r25, Y+5	; 0x05
 94a:	83 30       	cpi	r24, 0x03	; 3
 94c:	91 05       	cpc	r25, r1
 94e:	b9 f1       	breq	.+110    	; 0x9be <DIO_u8ReadPinValue+0xbe>
 950:	47 c0       	rjmp	.+142    	; 0x9e0 <DIO_u8ReadPinValue+0xe0>
	case DIO_PORTA: value= GET_BIT(PINA,pin);
 952:	e9 e3       	ldi	r30, 0x39	; 57
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	80 81       	ld	r24, Z
 958:	28 2f       	mov	r18, r24
 95a:	30 e0       	ldi	r19, 0x00	; 0
 95c:	8b 81       	ldd	r24, Y+3	; 0x03
 95e:	88 2f       	mov	r24, r24
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	a9 01       	movw	r20, r18
 964:	02 c0       	rjmp	.+4      	; 0x96a <DIO_u8ReadPinValue+0x6a>
 966:	55 95       	asr	r21
 968:	47 95       	ror	r20
 96a:	8a 95       	dec	r24
 96c:	e2 f7       	brpl	.-8      	; 0x966 <DIO_u8ReadPinValue+0x66>
 96e:	ca 01       	movw	r24, r20
 970:	81 70       	andi	r24, 0x01	; 1
 972:	89 83       	std	Y+1, r24	; 0x01
 974:	35 c0       	rjmp	.+106    	; 0x9e0 <DIO_u8ReadPinValue+0xe0>
	break;
	case DIO_PORTB: value= GET_BIT(PINB,pin);
 976:	e6 e3       	ldi	r30, 0x36	; 54
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 81       	ld	r24, Z
 97c:	28 2f       	mov	r18, r24
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	8b 81       	ldd	r24, Y+3	; 0x03
 982:	88 2f       	mov	r24, r24
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	a9 01       	movw	r20, r18
 988:	02 c0       	rjmp	.+4      	; 0x98e <DIO_u8ReadPinValue+0x8e>
 98a:	55 95       	asr	r21
 98c:	47 95       	ror	r20
 98e:	8a 95       	dec	r24
 990:	e2 f7       	brpl	.-8      	; 0x98a <DIO_u8ReadPinValue+0x8a>
 992:	ca 01       	movw	r24, r20
 994:	81 70       	andi	r24, 0x01	; 1
 996:	89 83       	std	Y+1, r24	; 0x01
 998:	23 c0       	rjmp	.+70     	; 0x9e0 <DIO_u8ReadPinValue+0xe0>
		break;
	case DIO_PORTC: value= GET_BIT(PINC,pin);
 99a:	e3 e3       	ldi	r30, 0x33	; 51
 99c:	f0 e0       	ldi	r31, 0x00	; 0
 99e:	80 81       	ld	r24, Z
 9a0:	28 2f       	mov	r18, r24
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	8b 81       	ldd	r24, Y+3	; 0x03
 9a6:	88 2f       	mov	r24, r24
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	a9 01       	movw	r20, r18
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <DIO_u8ReadPinValue+0xb2>
 9ae:	55 95       	asr	r21
 9b0:	47 95       	ror	r20
 9b2:	8a 95       	dec	r24
 9b4:	e2 f7       	brpl	.-8      	; 0x9ae <DIO_u8ReadPinValue+0xae>
 9b6:	ca 01       	movw	r24, r20
 9b8:	81 70       	andi	r24, 0x01	; 1
 9ba:	89 83       	std	Y+1, r24	; 0x01
 9bc:	11 c0       	rjmp	.+34     	; 0x9e0 <DIO_u8ReadPinValue+0xe0>
		break;
	case DIO_PORTD: value= GET_BIT(PIND,pin);
 9be:	e0 e3       	ldi	r30, 0x30	; 48
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	28 2f       	mov	r18, r24
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ca:	88 2f       	mov	r24, r24
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	a9 01       	movw	r20, r18
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <DIO_u8ReadPinValue+0xd6>
 9d2:	55 95       	asr	r21
 9d4:	47 95       	ror	r20
 9d6:	8a 95       	dec	r24
 9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <DIO_u8ReadPinValue+0xd2>
 9da:	ca 01       	movw	r24, r20
 9dc:	81 70       	andi	r24, 0x01	; 1
 9de:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return value;
 9e0:	89 81       	ldd	r24, Y+1	; 0x01
}
 9e2:	0f 90       	pop	r0
 9e4:	0f 90       	pop	r0
 9e6:	0f 90       	pop	r0
 9e8:	0f 90       	pop	r0
 9ea:	0f 90       	pop	r0
 9ec:	cf 91       	pop	r28
 9ee:	df 91       	pop	r29
 9f0:	08 95       	ret

000009f2 <DIO_vidPinToggle>:

void DIO_vidPinToggle(DIO_Port_t port,DIO_Pin_t pin){
 9f2:	df 93       	push	r29
 9f4:	cf 93       	push	r28
 9f6:	00 d0       	rcall	.+0      	; 0x9f8 <DIO_vidPinToggle+0x6>
 9f8:	00 d0       	rcall	.+0      	; 0x9fa <DIO_vidPinToggle+0x8>
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	89 83       	std	Y+1, r24	; 0x01
 a00:	6a 83       	std	Y+2, r22	; 0x02
    switch(port){
 a02:	89 81       	ldd	r24, Y+1	; 0x01
 a04:	28 2f       	mov	r18, r24
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	3c 83       	std	Y+4, r19	; 0x04
 a0a:	2b 83       	std	Y+3, r18	; 0x03
 a0c:	8b 81       	ldd	r24, Y+3	; 0x03
 a0e:	9c 81       	ldd	r25, Y+4	; 0x04
 a10:	81 30       	cpi	r24, 0x01	; 1
 a12:	91 05       	cpc	r25, r1
 a14:	49 f1       	breq	.+82     	; 0xa68 <DIO_vidPinToggle+0x76>
 a16:	2b 81       	ldd	r18, Y+3	; 0x03
 a18:	3c 81       	ldd	r19, Y+4	; 0x04
 a1a:	22 30       	cpi	r18, 0x02	; 2
 a1c:	31 05       	cpc	r19, r1
 a1e:	2c f4       	brge	.+10     	; 0xa2a <DIO_vidPinToggle+0x38>
 a20:	8b 81       	ldd	r24, Y+3	; 0x03
 a22:	9c 81       	ldd	r25, Y+4	; 0x04
 a24:	00 97       	sbiw	r24, 0x00	; 0
 a26:	61 f0       	breq	.+24     	; 0xa40 <DIO_vidPinToggle+0x4e>
 a28:	5a c0       	rjmp	.+180    	; 0xade <DIO_vidPinToggle+0xec>
 a2a:	2b 81       	ldd	r18, Y+3	; 0x03
 a2c:	3c 81       	ldd	r19, Y+4	; 0x04
 a2e:	22 30       	cpi	r18, 0x02	; 2
 a30:	31 05       	cpc	r19, r1
 a32:	71 f1       	breq	.+92     	; 0xa90 <DIO_vidPinToggle+0x9e>
 a34:	8b 81       	ldd	r24, Y+3	; 0x03
 a36:	9c 81       	ldd	r25, Y+4	; 0x04
 a38:	83 30       	cpi	r24, 0x03	; 3
 a3a:	91 05       	cpc	r25, r1
 a3c:	e9 f1       	breq	.+122    	; 0xab8 <DIO_vidPinToggle+0xc6>
 a3e:	4f c0       	rjmp	.+158    	; 0xade <DIO_vidPinToggle+0xec>
	case DIO_PORTA:  TOG_BIT(PORTA,pin);
 a40:	ab e3       	ldi	r26, 0x3B	; 59
 a42:	b0 e0       	ldi	r27, 0x00	; 0
 a44:	eb e3       	ldi	r30, 0x3B	; 59
 a46:	f0 e0       	ldi	r31, 0x00	; 0
 a48:	80 81       	ld	r24, Z
 a4a:	48 2f       	mov	r20, r24
 a4c:	8a 81       	ldd	r24, Y+2	; 0x02
 a4e:	28 2f       	mov	r18, r24
 a50:	30 e0       	ldi	r19, 0x00	; 0
 a52:	81 e0       	ldi	r24, 0x01	; 1
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	02 2e       	mov	r0, r18
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <DIO_vidPinToggle+0x6c>
 a5a:	88 0f       	add	r24, r24
 a5c:	99 1f       	adc	r25, r25
 a5e:	0a 94       	dec	r0
 a60:	e2 f7       	brpl	.-8      	; 0xa5a <DIO_vidPinToggle+0x68>
 a62:	84 27       	eor	r24, r20
 a64:	8c 93       	st	X, r24
 a66:	3b c0       	rjmp	.+118    	; 0xade <DIO_vidPinToggle+0xec>
	break;
	case DIO_PORTB:  TOG_BIT(PORTB,pin);
 a68:	a8 e3       	ldi	r26, 0x38	; 56
 a6a:	b0 e0       	ldi	r27, 0x00	; 0
 a6c:	e8 e3       	ldi	r30, 0x38	; 56
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	80 81       	ld	r24, Z
 a72:	48 2f       	mov	r20, r24
 a74:	8a 81       	ldd	r24, Y+2	; 0x02
 a76:	28 2f       	mov	r18, r24
 a78:	30 e0       	ldi	r19, 0x00	; 0
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	02 2e       	mov	r0, r18
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_vidPinToggle+0x94>
 a82:	88 0f       	add	r24, r24
 a84:	99 1f       	adc	r25, r25
 a86:	0a 94       	dec	r0
 a88:	e2 f7       	brpl	.-8      	; 0xa82 <DIO_vidPinToggle+0x90>
 a8a:	84 27       	eor	r24, r20
 a8c:	8c 93       	st	X, r24
 a8e:	27 c0       	rjmp	.+78     	; 0xade <DIO_vidPinToggle+0xec>
		break;
	case DIO_PORTC:  TOG_BIT(PORTC,pin);
 a90:	a5 e3       	ldi	r26, 0x35	; 53
 a92:	b0 e0       	ldi	r27, 0x00	; 0
 a94:	e5 e3       	ldi	r30, 0x35	; 53
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	80 81       	ld	r24, Z
 a9a:	48 2f       	mov	r20, r24
 a9c:	8a 81       	ldd	r24, Y+2	; 0x02
 a9e:	28 2f       	mov	r18, r24
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	02 2e       	mov	r0, r18
 aa8:	02 c0       	rjmp	.+4      	; 0xaae <DIO_vidPinToggle+0xbc>
 aaa:	88 0f       	add	r24, r24
 aac:	99 1f       	adc	r25, r25
 aae:	0a 94       	dec	r0
 ab0:	e2 f7       	brpl	.-8      	; 0xaaa <DIO_vidPinToggle+0xb8>
 ab2:	84 27       	eor	r24, r20
 ab4:	8c 93       	st	X, r24
 ab6:	13 c0       	rjmp	.+38     	; 0xade <DIO_vidPinToggle+0xec>
		break;
	case DIO_PORTD:  TOG_BIT(PORTD,pin);
 ab8:	a2 e3       	ldi	r26, 0x32	; 50
 aba:	b0 e0       	ldi	r27, 0x00	; 0
 abc:	e2 e3       	ldi	r30, 0x32	; 50
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	80 81       	ld	r24, Z
 ac2:	48 2f       	mov	r20, r24
 ac4:	8a 81       	ldd	r24, Y+2	; 0x02
 ac6:	28 2f       	mov	r18, r24
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	02 2e       	mov	r0, r18
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <DIO_vidPinToggle+0xe4>
 ad2:	88 0f       	add	r24, r24
 ad4:	99 1f       	adc	r25, r25
 ad6:	0a 94       	dec	r0
 ad8:	e2 f7       	brpl	.-8      	; 0xad2 <DIO_vidPinToggle+0xe0>
 ada:	84 27       	eor	r24, r20
 adc:	8c 93       	st	X, r24
		break;
	}

 ade:	0f 90       	pop	r0
 ae0:	0f 90       	pop	r0
 ae2:	0f 90       	pop	r0
 ae4:	0f 90       	pop	r0
 ae6:	cf 91       	pop	r28
 ae8:	df 91       	pop	r29
 aea:	08 95       	ret

00000aec <main>:
#include"04-APP/APP.h"


int main(){
 aec:	df 93       	push	r29
 aee:	cf 93       	push	r28
 af0:	cd b7       	in	r28, 0x3d	; 61
 af2:	de b7       	in	r29, 0x3e	; 62
    APP_vidInit();
 af4:	0e 94 36 00 	call	0x6c	; 0x6c <APP_vidInit>

        APP_vidStart();
 af8:	0e 94 43 00 	call	0x86	; 0x86 <APP_vidStart>

    return 0; 
 afc:	80 e0       	ldi	r24, 0x00	; 0
 afe:	90 e0       	ldi	r25, 0x00	; 0
}
 b00:	cf 91       	pop	r28
 b02:	df 91       	pop	r29
 b04:	08 95       	ret

00000b06 <_exit>:
 b06:	f8 94       	cli

00000b08 <__stop_program>:
 b08:	ff cf       	rjmp	.-2      	; 0xb08 <__stop_program>
